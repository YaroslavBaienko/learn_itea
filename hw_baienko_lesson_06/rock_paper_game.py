"""На языке на выбор (из Java/C#/PHP/JavaScript/Swift/Ruby) реализовать скрипт, который реализует обобщенную игру
камень-ножницы-бумага (любое число произвольных комбинаций). При запуске параметрами командной строки (аргументы
метода main или Main в случае Java или C#, sys.argv в Python, process.argv под Node.js и т.д.) передаётся нечётное
число >=3 неповторяющихся строк (при неправильно заданных аргументах необходимо вывести аккуратное сообщение об
ошибке — что именно неверно, пример как правильно). Все сообщения на английском языке. Эти строки — это ходы (
например, Камень Ножницы Бумага или Камень Ножницы Бумага Ящерица Спок или 1 2 3 4 5 6 7 8 9).

Важно: ходы передаются аргументами командной строки, вы их не парсите из потока ввода (например, ход может содержать
пробел, но для вашего кода это не должно иметь никакого значения). Победа определяется так — половина следующих по
кругу выигрывает, половина предыдущих по кругу проигрывает (семантика строк не важна, в какой последовательности что
пользователь ввел, в такую игру и играет, даже если по его порядку камень проигрывает ножницам — для вас содержимое
строк не важно).

Скрипт генерирует криптографически стойкий случайный ключ случайный ключ (SecureRandom, RandomNumberGenerator и т.п.
— обязательно!) длиной не менее 256 бит, делает свой ход, вычисляет HMAC (на базе SHA2 или SHA3) от хода со
сгенерированным ключом, показывает пользователя HMAC. После этого пользователь получает "меню" 1 - Камень,
2 - Ножницы, ...., 0 - Exit. Пользователь делает свой выбор (при некорректном вводе опять отображается "меню").
Скрипт показывает кто победил, ход компьютера и исходный ключ.


Перечитайте абзац выше, последовательность критически важна (в другой последовательности просто нет смысла, например,
показывать ключ до хода пользователя или HMAC вместо ключа). Таким образом, пользователь может проверить,
что компьютер играет честно (не поменял свой ход после хода пользователя). При выборе опции "help" в терминале нужно
отобразить таблицу, определяющую какой ход выигрывает. Генерация таблицы должна быть вынесена в отдельный класс,
определение "правил" кто победил должно быть в отдельном классе, функции генерации ключа и HMAC должны быть в
отдельном классе (всего 4 класса). По максимуму следует использовать базовые библиотеки классов и сторонние
библиотеки, а не изобретать велосипед. ЧИСЛО ХОДОВ МОЖЕТ БЫТЬ ЛЮБЫМ (нечетным > 1, зависит от переданных параметров),
не зашито в коде. Пример: >java -jar game.jar rock paper scissors lizard Spock HMAC:
FAAC40C71B4B12BF0EF5556EEB7C06925D5AE405D447E006BB8A06565338D411 Available moves: 1 - rock 2 - paper 3 - scissors 4 -
lizard 5 - Spock 0 - exit ? - help Enter your move: 2 Your move: paper Computer move: rock You win! HMAC key:
BD9BE48334BB9C5EC263953DA54727F707E95544739FCE7359C267E734E380A2 1) ссылку на видео, демонстрирующее запуск с 3 и 7
параметрами, запуск с неправильными параметрами (повторение или чётное число, один или отсутствие), генерацию таблицы
помощи (на 5 параметрах), выбор хода, вывод результатов; 2) исходный код ссылкой на гитхаб. И как пояснение: при
вычислении HMAC ключ — это тот самый секретный ключ, который вы сгенерировали. А сообщение — это ход (прямо вот
строка хода). После хода пользователя у него будет ключ, ход компьютера, пользователь сможет вычислить HMAC и
сравнить с HMAC-ом, который был показан до хода пользователя. Это не очень сложно (smiley)) Частая ошибка — попытка
изобрести свой "HMAC" как хэш от случайного "ключа". Так не пойдёт. Если вы показываете одинаковые строки до хода и
после хода, пользователь после хода не получает новой информации и, соответсвенно, вы ничего ему не доказываете.
Нужно сгенерировать ключ (безопасным генератором), сделать ход компа, вычислить HMAC (стандартным алгоритмом) от хода
компа (сообщение) и ключа (ключ), показать HMAC, получить ход пользователя, показать ключ. Перечитывать этот абзац до
полного вкуривания.

"Правильный" порядок (хотя пользователь может использовать другой порядок и играть в игру, в которой ножницы
побеждают камень; или играть в игру ХОД1 ХОД2 ХОД3(sad) КАМЕНЬ БУМАГА НОЖНИЦЫ или КАМЕНЬ СПОК БУМАГА ЯЩЕРИЦА НОЖНИЦЫ.
"""


def generate_hmac():
    import string
    import secrets
    alphabet = string.ascii_letters + string.digits
    while True:
        password = ''.join(secrets.choice(alphabet) for i in range(10))
        if (any(c.islower() for c in password)
                and any(c.isupper() for c in password)
                and sum(c.isdigit() for c in password) >= 3):
            break
    return password


print(generate_hmac())
